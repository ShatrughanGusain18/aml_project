# -*- coding: utf-8 -*-
"""clustering and attack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS2gCDBCRe7JNOajGt50EoqsctjzSlPh
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %pip install cleverhans
import cleverhans

import pandas as pd
import numpy as np
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn import datasets
from sklearn.cluster import KMeans

import matplotlib.pyplot as plt

from sklearn.metrics import silhouette_score

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

from sklearn.metrics.pairwise import euclidean_distances

import keras
import tensorflow as tf

from cleverhans.tf2.attacks import fast_gradient_method
from cleverhans.tf2.attacks import projected_gradient_descent
from cleverhans.tf2.attacks import momentum_iterative_method
from cleverhans.tf2.attacks import basic_iterative_method

from scipy.spatial.distance import cdist

import time

import warnings
warnings.filterwarnings("ignore")



# Read and divide the data
df_1 = pd.read_csv("/content/drive/MyDrive/research/dataset2.0/file_name.csv")
df_1=df_1.drop('malwares',axis=1)
df2 = pd.read_csv("/content/drive/MyDrive/research/dataset2.0/system_call.csv")
df_1 = pd.concat([df_1, df2], axis = 1)
ds_1 = df_1.values
Y1 = ds_1[:,-1]
X_1 = ds_1[:,0:-1]
print(f"Dataset Size: {ds_1.shape[0]} Rows and {ds_1.shape[1]} Columns")

df_1 = df_1.fillna(df_1.mean())

pd.unique(Y1)

import re
df_1['malwares'] = df_1['malwares'].apply(lambda x: re.sub(r'\d+', '', x))

df_1['malwares']

y=df_1['malwares']

np.unique(y)

encoder = LabelEncoder()
encoded_Y1 = encoder.fit_transform(y)

print(encoded_Y1)

scaler_1 = MinMaxScaler()
scaler_1.fit(X_1)
X_1 = scaler_1.transform(X_1)

from sklearn.model_selection import train_test_split
X_train, x_rem_1, y_train, y_rem = train_test_split(X_1, encoded_Y1, train_size=0.8, random_state=10, stratify=encoded_Y1)
x_val_1, X_test, y_val, y_test = train_test_split(x_rem_1, y_rem, train_size=0.5, random_state=10, stratify=y_rem)

y_test

from keras.models import load_model
file_name = "/content/drive/MyDrive/research/dnnmodel.h5"
final_model = load_model(file_name)

"""### model"""

from keras.models import load_model
model_1 = final_model
scores = model_1.evaluate([X_test], y_test, verbose=0)
print("%s: %.2f%%" % (model_1.metrics_names[1], scores[1]*100))


predictions = model_1.predict([X_test])
predictions = np.argmax(predictions, axis=-1)
#y_test_labels = np.argmax(y_test, axis=1)
from sklearn.metrics import f1_score
#f1 = f1_score(y_test_labels, predictions, average='weighted')
#print('F1: ', "%.2f" % (f1*100))

model_1.summary()

model_1.layers[-1].output

class_subsets = {}
unique_labels = np.unique(y_test)
print(unique_labels)
for label in unique_labels:
    class_subsets[label] = X_test[y_test == label]

class_subsets[8]

labels = encoder.inverse_transform(y_test)

labels = np.unique(labels)

labels

unique_labels

max_sil = pd.DataFrame(columns = ['Name of the family', 'Encoded value of the family','No of Clusters', 'Silhouette Score'])
for i, j in zip(unique_labels, labels):
    scores = []
    numbers = list(range(2, 10))
    print("For label ->", i, j)
    for k in numbers:
        kmeans = KMeans(n_clusters = k)
        label = kmeans.fit_predict(class_subsets[i])
        score = silhouette_score(class_subsets[i], label)
        scores.append(score)
    plt.plot(range(2, 10), scores)
    plt.title('Silhouette Score')
    plt.xlabel('Number of clusters')
    plt.ylabel('Score')
    plt.show()
    max_score = max(scores)
    max_index = scores.index(max_score)
    max_number = numbers[max_index]
    result = [j, i, max_number, max_score]
    max_sil = max_sil.append(pd.Series(result, index = max_sil.columns), ignore_index = True)


    print("*************************")

max_sil.to_csv("cluster_details.csv")

max_sil

clusters_per_label = []
for i, j in zip (max_sil['No of Clusters'], max_sil['Encoded value of the family'] ):
    kmeans = KMeans(n_clusters = i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    clusters = kmeans.fit_predict(class_subsets[j])
    clusters_per_label.append(clusters)

for label, clusters in enumerate(clusters_per_label):
    print(f"Clusters for Label {label}: {clusters}")

class_subsets[1]

# For adload
cluster1_indices = np.where(clusters_per_label[6] == 0)[0]
cluster2_indices = np.where(clusters_per_label[6] == 1)[0]
cluster3_indices = np.where(clusters_per_label[6] == 2)[0]
cluster4_indices = np.where(clusters_per_label[6] == 3)[0]

adload_cluster1 = class_subsets[6][cluster1_indices]
adload_cluster2 = class_subsets[6][cluster2_indices]
adload_cluster3 = class_subsets[6][cluster3_indices]
adload_cluster4 = class_subsets[6][cluster4_indices]

logits_model = tf.keras.Model(model_1.input, model_1.layers[-1].output)

target_label = np.reshape(2, (1,)).astype('int64')

columns_name = df_1.iloc[:,0:-1].columns

no_of_samples = pd.DataFrame(columns = ['No of samples in each cluster', 'Techniques', 'No of Adversarial samples'])

adload_cluster1[0]

adload_cluster1.shape

print(adload_cluster1.shape)
print(adload_cluster2.shape)
print(adload_cluster3.shape)
print(adload_cluster4.shape)

from keras.utils import to_categorical

"""### FGSM"""

from keras.utils import to_categorical
target_class = 2
x_adv_FGSM = []
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster1:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = fast_gradient_method.fast_gradient_method(logits_model, sample, epsilon, np.inf, targeted=True, y=target_label)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)

        if(predicted_class == target_class):
            end_time = time.time()
            elapsed_time = end_time - start_time
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            #df_original_adload = df_original_adload.append(pd.Series(sample, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)


if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((11,), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after FGSM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/6/adv_samples_cluster1.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/6/efforts_cluster1.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/6/org_samples_cluster1.csv")

values = [adload_cluster1.shape[0], 'FGSM', 'no_adv']
no_of_samples = no_of_samples.append(pd.Series(values, index = no_of_samples.columns), ignore_index = True)
no_of_samples.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/6/samples.csv")

from tensorflow.python.ops.numpy_ops import np_config
np_config.enable_numpy_behavior()

target_class = 2
x_adv_FGSM = []
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster2:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = fast_gradient_method.fast_gradient_method(logits_model, sample, epsilon, np.inf, targeted=True, y=target_label)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            end_time = time.time()
            elapsed_time = end_time - start_time
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            new_sample = np.concatenate((new_sample, adv_mal_FGSM), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            df_original_adload = df_original_adload.append(pd.Series(sample, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(adv_mal_FGSM, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)


if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster2.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after FGSM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/6/adv_samples_cluster2.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/6/efforts_cluster2.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/6/org_samples_cluster2.csv")

target_class = 2
x_adv_FGSM = []
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster3:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = fast_gradient_method.fast_gradient_method(logits_model, sample, epsilon, np.inf, targeted=True, y=target_label)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            end_time = time.time()
            elapsed_time = end_time - start_time
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            new_sample = np.concatenate((new_sample, adv_mal_FGSM), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            df_original_adload = df_original_adload.append(pd.Series(sample, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(adv_mal_FGSM, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)


if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster3.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after FGSM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/8/adv_samples_cluster3.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/8/efforts_cluster3.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/8/org_samples_cluster3.csv")

target_class = 2
x_adv_FGSM = []
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster4:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = fast_gradient_method.fast_gradient_method(logits_model, sample, epsilon, np.inf, targeted=True, y=target_label)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            end_time = time.time()
            elapsed_time = end_time - start_time
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            new_sample = np.concatenate((new_sample, adv_mal_FGSM), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            df_original_adload = df_original_adload.append(pd.Series(sample, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(adv_mal_FGSM, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)


if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster4.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after FGSM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/8/adv_samples_cluster4.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/8/efforts_cluster4.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/FGSM/8/org_samples_cluster4.csv")

"""### mim"""

target_class = 2
x_adv_MIM = []
x_org=[]
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster1:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = momentum_iterative_method.momentum_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.009, nb_iter=100, norm= 2, y = target_label, targeted = True)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            end_time = time.time()
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            x_org.append(sample)
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            #df_original_adload = df_original_adload.append(pd.Series(sample, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster1.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after MIM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/adload_adv_samples_cluster1.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/adload_efforts_cluster1.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/adload_org_samples_cluster1.csv")

target_class = 2
x_adv_MIM = []
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster2:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = momentum_iterative_method.momentum_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.06, nb_iter=100, norm= 2, y = target_label, targeted = True, clip_min=0, clip_max=1)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            end_time = time.time()
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster2.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after MIM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/adv_samples_cluster2.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/efforts_cluster2.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/org_samples_cluster2.csv")

target_class = 2
x_adv_MIM = []
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster3:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = momentum_iterative_method.momentum_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.06, nb_iter=100, norm= 2, y = target_label, targeted = True, clip_min=0, clip_max=1)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            end_time = time.time()
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster3.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after MIM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/adv_samples_cluster3.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/efforts_cluster3.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/6/org_samples_cluster3.csv")

target_class = 2
x_adv_MIM = []
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster4:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = momentum_iterative_method.momentum_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.06, nb_iter=100, norm= 2, y = target_label, targeted = True, clip_min=0, clip_max=1)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            end_time = time.time()
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster4.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after MIM attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/8/adv_samples_cluster4.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/8/efforts_cluster4.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/MIM/8/org_samples_cluster4.csv")

"""### pgd"""

target_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster1:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.01, 1.0, 0.01):
        x_adv = projected_gradient_descent.projected_gradient_descent(logits_model, sample, eps = epsilon, eps_iter = 0.009, nb_iter=100, norm= 2, y = target_label, targeted = True, clip_min=0, clip_max=1)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            end_time = time.time()
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(sample, (1675,))
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster1.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/adv_samples_cluster1.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/efforts_cluster1.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/org_samples_cluster1.csv")

target_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster2:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.1, 1.0, 0.1):
        x_adv = projected_gradient_descent.projected_gradient_descent(logits_model, sample, eps = epsilon, eps_iter = 0.06, nb_iter=100, norm= 2, y = target_label, targeted = True, clip_min=0, clip_max=1)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            end_time = time.time()
            elapsed_time = end_time - start_time
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster2.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/adv_samples_cluster2.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/efforts_cluster2.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/org_samples_cluster2.csv")

target_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster3:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.1, 1.0, 0.1):
        x_adv = projected_gradient_descent.projected_gradient_descent(logits_model, sample, eps = epsilon, eps_iter = 0.06, nb_iter=100, norm= 2, y = target_label, targeted = True, clip_min=0, clip_max=1)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            end_time = time.time()
            elapsed_time = end_time - start_time
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster3.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/adv_samples_cluster3.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/efforts_cluster3.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/6/org_samples_cluster3.csv")

target_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster4:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.1, 1.0, 0.1):
        x_adv = projected_gradient_descent.projected_gradient_descent(logits_model, sample, eps = epsilon, eps_iter = 0.06, nb_iter=100, norm= 2, y = target_label, targeted = True, clip_min=0, clip_max=1)
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            end_time = time.time()
            elapsed_time = end_time - start_time
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster4.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/8/adv_samples_cluster4.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/8/efforts_cluster4.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/PGD/8/org_samples_cluster4.csv")

"""### BIM"""

target_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster1:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.1, 1.0, 0.01):
        x_adv = basic_iterative_method.basic_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.006, nb_iter=100, norm= 2, y = target_label, targeted = True)
        end_time = time.time()
        elapsed_time = end_time - start_time
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster1.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/adv_samples_cluster1.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/efforts_cluster1.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/org_samples_cluster1.csv")

target_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster2:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.1, 1.0, 0.01):
        x_adv = basic_iterative_method.basic_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.006, nb_iter=100, norm= 2, y = target_label, targeted = True)
        end_time = time.time()
        elapsed_time = end_time - start_time
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster2.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/adv_samples_cluster2.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/efforts_cluster2.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/org_samples_cluster2.csv")

target_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster3:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.1, 1.0, 0.01):
        x_adv = basic_iterative_method.basic_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.006, nb_iter=100, norm= 2, y = target_label, targeted = True)
        end_time = time.time()
        elapsed_time = end_time - start_time
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster3.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/adv_samples_cluster3.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/efforts_cluster3.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/6/org_samples_cluster3.csv")

arget_class = 2
new_sample = np.array([])
df = pd.DataFrame(columns = ['Epsilon Value', 'Effort'])
df_original_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
df_adv_adload = pd.DataFrame(columns = columns_name)
no_adv = 0
for sample in adload_cluster4:
    flag = 0
    sample = np.reshape(sample, (1, 1675))
    start_time = time.time()
    for epsilon in np.arange(0.1, 1.0, 0.01):
        x_adv = basic_iterative_method.basic_iterative_method(logits_model, sample, eps = epsilon, eps_iter = 0.006, nb_iter=100, norm= 2, y = target_label, targeted = True)
        end_time = time.time()
        elapsed_time = end_time - start_time
        predictions = model_1.predict(x_adv)
        predicted_class = np.argmax(predictions)
        if(predicted_class == target_class):
            print("Original value and  predicted value", 0, predicted_class)
            flag = 1
            no_adv = no_adv + 1
            elapsed_time = end_time - start_time
            if new_sample.size == 0:
                new_sample = x_adv
            else:
                new_sample = np.concatenate((new_sample, x_adv), axis=0)
            result = [epsilon, elapsed_time]
            df = df.append(pd.Series(result, index = df.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            #df_original_adload = df_original_adload.append(pd.Series(my_array, index = df_original_adload.columns), ignore_index = True)
            my_array = np.reshape(x_adv, (1675,))
            df_adv_adload = df_adv_adload.append(pd.Series(my_array, index = df_adv_adload.columns), ignore_index = True)
            break
    if flag == 0:
        if new_sample.size == 0:
            new_sample = sample
        else:
            new_sample = np.concatenate((new_sample, sample), axis=0)

if(no_adv == 0):
    print("Zero adversarial sample is generated for the cluster")
else:
    y_original = np.full((adload_cluster4.shape[0],), 0)
    y_original = to_categorical(y_original)
    scores = model_1.evaluate(new_sample, y_original, verbose=0)
    adv_accuracy = scores[1]*100
    print("Accuracy after PGD attack with  : %.2f%%" %(scores[1]*100))
    df_adv_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/8/adv_samples_cluster4.csv")
    df.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/8/efforts_cluster4.csv")
    df_original_adload.to_csv("/content/drive/MyDrive/research/Cleverhans/BIM/8/org_samples_cluster4.csv")